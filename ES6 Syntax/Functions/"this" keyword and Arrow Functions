***** ES5
"this" depends on how the function is called.

  "this" points to
  1. A new object, if a function is called with new.
     const mySundae = new Sundae('Chocolate', ['Sprinkles', 'Hot Fudge']);
     // this points to a new object
  2. A specified object, if a function is invoked with call/apply.
     const result = obj1.printName.call(obj2); // this refers to obj2
  3. A context object, if the function is a method of an object.
     data.teleport(); // this points to data
  4. The global object or undefined, if the function is called with no context.
     teleport(); // this points to undefined (strict mode) or window

  // https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md

***** ES6
where a function is located in the code.

  1. The value of "this" inside an arrow function is the same as
     the value of "this" outside the function.
  2. Arrow functions are useful for dealing with nested functions inside
     an object. Don't need to use  closure (const self = this;)

     // constructor
     function IceCream() {
         this.scoops = 0;
     }

     // adds scoop to ice cream
     IceCream.prototype.addScoop = () => { // addScoop is now an arrow function
       setTimeout(() => {
         this.scoops++;
         console.log('scoop added!');
       }, 0.5);
     };

     const dessert = new IceCream();
     dessert.addScoop();
     console.log(desert.scoop); // 1

NOTE: The above code works because when using "this" inside
an arrow function, it automatically uses its surrounding context
to determine the value of "this".

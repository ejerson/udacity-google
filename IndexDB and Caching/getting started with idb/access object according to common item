import idb from 'idb';

// index can only be created as part of a verion upgrade
var dbPromise = idb.open('test-db', 3, function(upgradeDb) {
  // in order to avoid errors from being generated due to an already created
  // databse, use a switch statement without a breaks
  switch(upgradeDb.oldVersion) {
    // no break, so if a different browser sees this code it will
    // go ahead and create both the databse
    case 0:
      var keyValStore = upgradeDb.createObjectStore('keyval');
      keyValStore.put("world", "hello");
    case 1:
      // use an object as a way to store values
      upgradeDb.createObjectStore('people', { keyPath: 'name'});
      // databse objects have their own transaction objects
    case 2:
      var peopleStore = upgradeDb.transaction.objectStore('people');
      // to create an index
      peopleStore.createIndex('animal', 'favoriteAnimal');
  }



});

// read "hello" in "keyval"
dbPromise.then(function(db) {
  var tx = db.transaction('keyval');
  var keyValStore = tx.objectStore('keyval');
  return keyValStore.get('hello');
}).then(function(val) {
  console.log('The value of "hello" is:', val);
});

// set "foo" to be "bar" in "keyval"
dbPromise.then(function(db) {
  var tx = db.transaction('keyval', 'readwrite');
  var keyValStore = tx.objectStore('keyval');
  keyValStore.put('bar', 'foo');
  return tx.complete;
}).then(function() {
  console.log('Added foo:bar to keyval');
});

dbPromise.then(function(db) {
  // TODO: in the keyval store, set
  // "favoriteAnimal" to your favourite animal
  // eg "cat" or "dog"
  var tx = db.transaction('keyval', 'readwrite');
  var keyValStore = tx.objectStore('keyval');
  keyValStore.put('dog', 'favoriteAnimal');
  return tx.complete;
}).then(function() {
  console.log('Added favoriteAnimal:dog to keyval');
});

// to populate the people databse do this
dbPromise.then(function(db) {
  var tx = db.transaction('people', 'readwrite');
  var peopleStore = tx.objectStore('people');

  peopleStore.put({
    name: 'Sam Munoz',
    age: 25,
    favoriteAnimal: 'elephant'
  });

  return tx.complete;
  // logs a successful message if transtion was completed
}).then(function() {
  console.log("People added");
});

// to read people database and display people according to their favorite animal
dbPromise.then(function(db) {
  var tx = db.transaction('people');
  var peopleStore = tx.objectStore('people');
  // get indexStore from object by name animalIndex
  var animalIndex = peopleStore.index('animal');

  // getAll() returns a promise for all the objects inside a store
  return animalIndex.getAll();
  // to get a specific object
    // return peopleStore.get('Sam Munoz');
  // to get a specific object according to an index
  // return animalIndex.getAll('cat');
}).then(function(val) {
  console.log("The value of name is: ", val);
});

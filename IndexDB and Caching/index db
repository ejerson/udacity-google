import idb from 'idb';

// only place to remove objects stores and indexes
// this returns a promise, can be used to get and set items in the database
var dbPromise = idb.open('test-db', 1, function(upgradeDb) {
  var keyValStore = upgradeDb.createObjectStore('keyval');
  keyValStore.put('world', 'hello');
});

// create a transaction to do work with the database
db.Promise.then(function(db) {
  // pass the object store that I'm going to use
  var tx = db.transaction('keyval');
  // call objectStore, repetitive because it is possible to have a
  // transaction that uses multiple object store.
  var keyValStore = tx.objectStore('keyval');
  return keyValStore.get('hello');
  // returns a promise that resolves to the value I'm looking for
}).then(function(val) {
  console.log('The value of "hello" is: ', val);
});


// To add another value to the object store
dbPromise.then(function(db) {
  // specify I want to read-write this time
  var tx = db.transaction('keyval', 'readwrite');
  var keyValStore = tx.objectStore('keyval');

  // set the key foo to be bar
  // put returns a promise but doesn't mean a transaction has suceeded
  // if one part of the operation fails the rest fail.
  keyValStore.put('bar', 'foo');

  // a promise that fulfills if and when a transaction completes
  // and it rejects if it fails.
  return tx.complete;
}).then(function() {
  console.log('Added foo:bar to keyval');
});
